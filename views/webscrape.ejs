<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Top 50 Manga - PerfectRed</title>
    <link rel="stylesheet" href="/styles.css?v=<%= version %>">
    <style>
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .manga-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 2rem;
            padding: 1rem;
        }

        .manga-card {
            background: rgb(0, 0, 0);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }

        .manga-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 24px rgba(244, 244, 244, 0.2);
        }

        .manga-cover {
            width: 100%;
            height: 280px;
            object-fit: cover;
            background: linear-gradient(135deg, #667eea 0%, #e2c4ff 100%);
        }

        .manga-info {
            padding: 1rem;
        }

        .manga-rank {
            display: inline-block;
            background: linear-gradient(135deg, #f80000 0%, #2f00ff 100%);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .manga-title {
            font-size: 1rem;
            font-weight: 600;
            color: #ff0000;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            min-height: 2.8em;
        }

        .loading {
            text-align: center;
            color: white;
            font-size: 1.5rem;
            padding: 4rem;
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2rem;
                margin-bottom: 2rem;
            }

            .manga-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 1rem;
            }

            .manga-cover {
                height: 220px;
            }
        }
    </style>
</head>
<body>
    <nav>
        <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/library">Library</a></li>
        <li><a href="/statistics">Statistics</a></li>
        <li><a href="/webscrape">MangaDex</a></li>
        <li><a href="/settings">Settings</a></li>
        </ul>
    </nav>
    <div class="container">
        <h1>Top 50 [MangaDex]</h1>
        <% if (manga && manga.length > 0) { %>
            <div class="manga-grid">
                <% manga.forEach((item, index) => { %>
                    <div class="manga-card" onclick="openSeriesInReader('<%= item.id %>', '<%= item.title %>')">
                        <% if (item.coverUrl) { %>
                            <img src="<%= item.coverUrl %>" alt="<%= item.title %>" class="manga-cover" loading="lazy">
                        <% } else { %>
                            <div class="manga-cover"></div>
                        <% } %>
                        <div class="manga-info">
                            <div class="manga-rank">#<%= index + 1 %></div>
                            <div class="manga-title"><%= item.title %></div>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <div class="loading">Loading manga data...</div>
        <% } %>
    </div>
    <script>
        async function openSeriesInReader(seriesId, title) {
            try {
                // Fetch last-read chapter from your API
                const res = await fetch(`/api/library/last-chapter/${seriesId}`);
                const data = await res.json();

                let chapterToOpen = '1'; // default first chapter
                if (data.success && data.chapter) {
                    chapterToOpen = data.chapter; // resume last-read chapter
                } else {
                    // Optional: mark series as started in your DB
                    await fetch('/api/library/start-series', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ seriesId, title })
                    });
                }

                // Redirect to your reader page
                window.location.href = `/reader?series=${encodeURIComponent(seriesId)}&chapter=${encodeURIComponent(chapterToOpen)}`;
            } catch (err) {
                console.error('Failed to open series in reader:', err);
                alert('Failed to open series in reader.');
            }
        }
    </script>
</body>
</html>