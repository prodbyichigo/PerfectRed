<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= fileName || 'Video Player' %> - PerfectRed</title>
    <link rel="icon" href="data:image/png;base64,<%= faviconBase64 %>" type="image/png">
    <link rel="stylesheet" href="/styles.css?v=<%= version %>">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
        }

        .player-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: #000;
        }

        .video-header {
            background: linear-gradient(180deg, rgba(0,0,0,0.8) 0%, transparent 100%);
            padding: 20px;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            z-index: 10;
            display: flex;
            justify-content: space-between;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .player-container:hover .video-header,
        .player-container:hover .video-controls {
            opacity: 1;
        }

        .back-button {
            background: rgba(255, 0, 0, 0.8);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }

        .back-button:hover {
            background: rgba(255, 0, 0, 1);
        }

        .video-title {
            color: white;
            font-size: 18px;
            font-weight: 500;
            flex: 1;
            text-align: center;
            padding: 0 20px;
        }

        .video-wrapper {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        video {
            max-width: 100%;
            max-height: 100%;
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .video-controls {
            background: linear-gradient(0deg, rgba(0,0,0,0.9) 0%, transparent 100%);
            padding: 20px;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 10;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .progress-container {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
            cursor: pointer;
            margin-bottom: 15px;
            position: relative;
        }

        .progress-bar {
            height: 100%;
            background: #ff0000;
            border-radius: 3px;
            width: 0%;
            transition: width 0.1s linear;
        }

        .controls-row {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .control-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px 10px;
            transition: transform 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .control-btn:hover {
            transform: scale(1.1);
        }

        .time-display {
            color: white;
            font-size: 14px;
            font-family: monospace;
            min-width: 120px;
        }

        .spacer {
            flex: 1;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .volume-slider {
            width: 80px;
            height: 4px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 2px;
            cursor: pointer;
            position: relative;
        }

        .volume-bar {
            height: 100%;
            background: #ff0000;
            border-radius: 2px;
            width: 100%;
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 48px;
            display: none;
        }

        .next-episode-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.95);
            padding: 40px;
            border-radius: 10px;
            text-align: center;
            display: none;
            z-index: 20;
        }

        .next-episode-overlay.show {
            display: block;
        }

        .next-episode-overlay h2 {
            color: white;
            margin: 0 0 20px 0;
        }

        .next-episode-overlay .countdown {
            color: #ff0000;
            font-size: 48px;
            font-weight: bold;
            margin: 20px 0;
        }

        .next-episode-overlay .buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .next-episode-overlay button {
            padding: 12px 30px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .next-episode-overlay .play-next {
            background: #ff0000;
            color: white;
        }

        .next-episode-overlay .play-next:hover {
            background: #cc0000;
        }

        .next-episode-overlay .cancel {
            background: #333;
            color: white;
        }

        .next-episode-overlay .cancel:hover {
            background: #555;
        }
    </style>
</head>
<body>
    <div class="player-container">
        <div class="video-header">
            <button class="back-button" onclick="goBack()">‚Üê Back</button>
            <div class="video-title" id="videoTitle"><%= fileName || 'Video' %></div>
            <div style="width: 100px;"></div>
        </div>

        <div class="video-wrapper">
            <video id="videoPlayer" preload="metadata"></video>
            <div class="loading-spinner" id="loadingSpinner">‚è≥</div>
        </div>

        <div class="video-controls" id="videoControls">
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="controls-row">
                <button class="control-btn" id="playPauseBtn" title="Play/Pause (Space)">‚ñ∂</button>
                <button class="control-btn" id="rewindBtn" title="Rewind 10s (‚Üê)">‚è™</button>
                <button class="control-btn" id="forwardBtn" title="Forward 10s (‚Üí)">‚è©</button>
                <span class="time-display" id="timeDisplay">0:00 / 0:00</span>
                <div class="spacer"></div>
                <div class="volume-control">
                    <button class="control-btn" id="volumeBtn" title="Mute (M)">üîä</button>
                    <div class="volume-slider" id="volumeSlider">
                        <div class="volume-bar" id="volumeBar"></div>
                    </div>
                </div>
                <button class="control-btn" id="fullscreenBtn" title="Fullscreen (F)">‚õ∂</button>
            </div>
        </div>

        <div class="next-episode-overlay" id="nextEpisodeOverlay">
            <h2>Up Next</h2>
            <div id="nextEpisodeName" style="color: white; margin: 10px 0;"></div>
            <div class="countdown" id="countdown">5</div>
            <div class="buttons">
                <button class="play-next" id="playNextBtn">Play Now</button>
                <button class="cancel" id="cancelBtn">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        const video = document.getElementById('videoPlayer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const rewindBtn = document.getElementById('rewindBtn');
        const forwardBtn = document.getElementById('forwardBtn');
        const timeDisplay = document.getElementById('timeDisplay');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const volumeBtn = document.getElementById('volumeBtn');
        const volumeSlider = document.getElementById('volumeSlider');
        const volumeBar = document.getElementById('volumeBar');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const nextEpisodeOverlay = document.getElementById('nextEpisodeOverlay');
        const countdown = document.getElementById('countdown');

        const urlParams = new URLSearchParams(window.location.search);
        const filePath = urlParams.get('file');
        const fileName = urlParams.get('name') || 'Unknown';
        const startTime = parseFloat(urlParams.get('time')) || 0;

        let nextEpisode = null;
        let countdownTimer = null;
        let countdownValue = 5;

        // Set video source
        video.src = '/file/' + encodeURIComponent(filePath);

        fetch('/api/video-progress/' + encodeURIComponent(filePath))
            .then(res => {
                if (!res.ok) {
                    console.error('Progress load failed with status:', res.status);
                    return null;
                }
                return res.json();
            })
            .then(data => {
                // Use startTime from URL if provided, otherwise use saved progress
                if (startTime > 0) {
                    video.currentTime = startTime;
                } else if (data && data.current_time && data.current_time > 5) {
                    video.currentTime = data.current_time;
                }
            })
            .catch(err => console.error('Failed to load progress:', err));

        // Find next episode
        async function findNextEpisode() {
            const folderPath = filePath.substring(0, filePath.lastIndexOf('/'));
            
            try {
                const res = await fetch('/api/folder-contents?folder=' + encodeURIComponent(folderPath));
                const data = await res.json();
                
                const videoFiles = data.files
                    .filter(f => f.type === '.webm')
                    .sort((a, b) => a.name.localeCompare(b.name, undefined, { numeric: true }));
                
                const currentIndex = videoFiles.findIndex(f => f.path === filePath);
                
                if (currentIndex !== -1 && currentIndex < videoFiles.length - 1) {
                    nextEpisode = videoFiles[currentIndex + 1];
                }
            } catch (err) {
                console.error('Failed to find next episode:', err);
            }
        }

        findNextEpisode();

        // Save progress periodically
        setInterval(() => {
            if (video.currentTime > 0 && video.duration > 0) {
                fetch('/api/progress/video', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        filePath: filePath,
                        fileName: fileName,
                        currentTime: video.currentTime,
                        duration: video.duration
                    })
                }).catch(err => console.error('Failed to save progress:', err));
            }
        }, 5000);

        // Play/Pause
        function togglePlayPause() {
            if (video.paused) {
                video.play();
                playPauseBtn.textContent = '‚è∏';
            } else {
                video.pause();
                playPauseBtn.textContent = '‚ñ∂';
            }
        }

        playPauseBtn.addEventListener('click', togglePlayPause);
        video.addEventListener('click', togglePlayPause);

        // Rewind/Forward
        rewindBtn.addEventListener('click', () => {
            video.currentTime = Math.max(0, video.currentTime - 10);
        });

        forwardBtn.addEventListener('click', () => {
            video.currentTime = Math.min(video.duration, video.currentTime + 10);
        });

        // Progress bar
        video.addEventListener('timeupdate', () => {
            const progress = (video.currentTime / video.duration) * 100;
            progressBar.style.width = progress + '%';
            updateTimeDisplay();
        });

        progressContainer.addEventListener('click', (e) => {
            const rect = progressContainer.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            video.currentTime = pos * video.duration;
        });

        // Time display
        function updateTimeDisplay() {
            const current = formatTime(video.currentTime);
            const duration = formatTime(video.duration);
            timeDisplay.textContent = `${current} / ${duration}`;
        }

        function formatTime(seconds) {
            if (isNaN(seconds)) return '0:00';
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }

        // Volume
        volumeBtn.addEventListener('click', () => {
            video.muted = !video.muted;
            volumeBtn.textContent = video.muted ? 'üîá' : 'üîä';
            volumeBar.style.width = video.muted ? '0%' : (video.volume * 100) + '%';
        });

        volumeSlider.addEventListener('click', (e) => {
            const rect = volumeSlider.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            video.volume = pos;
            video.muted = false;
            volumeBtn.textContent = 'üîä';
            volumeBar.style.width = (pos * 100) + '%';
        });

        // Fullscreen
        fullscreenBtn.addEventListener('click', () => {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        });

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            if (e.target.tagName === 'INPUT') return;
            
            switch(e.key) {
                case ' ':
                    e.preventDefault();
                    togglePlayPause();
                    break;
                case 'ArrowLeft':
                    video.currentTime -= 10;
                    break;
                case 'ArrowRight':
                    video.currentTime += 10;
                    break;
                case 'f':
                case 'F':
                    fullscreenBtn.click();
                    break;
                case 'm':
                case 'M':
                    volumeBtn.click();
                    break;
            }
        });

        // Loading state
        video.addEventListener('waiting', () => {
            loadingSpinner.style.display = 'block';
        });

        video.addEventListener('canplay', () => {
            loadingSpinner.style.display = 'none';
        });

        // Auto-play next episode
        video.addEventListener('ended', () => {
            if (nextEpisode) {
                showNextEpisodeOverlay();
            }
        });

        function showNextEpisodeOverlay() {
            document.getElementById('nextEpisodeName').textContent = nextEpisode.name;
            nextEpisodeOverlay.classList.add('show');
            countdownValue = 5;
            countdown.textContent = countdownValue;

            countdownTimer = setInterval(() => {
                countdownValue--;
                countdown.textContent = countdownValue;

                if (countdownValue <= 0) {
                    playNextEpisode();
                }
            }, 1000);
        }

        function playNextEpisode() {
            clearInterval(countdownTimer);
            window.location.href = `/player?file=${encodeURIComponent(nextEpisode.path)}&name=${encodeURIComponent(nextEpisode.name)}`;
        }

        function cancelNextEpisode() {
            clearInterval(countdownTimer);
            nextEpisodeOverlay.classList.remove('show');
        }

        document.getElementById('playNextBtn').addEventListener('click', playNextEpisode);
        document.getElementById('cancelBtn').addEventListener('click', cancelNextEpisode);

        function goBack() {
            const folderPath = filePath.substring(0, filePath.lastIndexOf('/'));
            window.location.href = '/library?folder=' + encodeURIComponent(folderPath);
        }
    </script>
</body>
</html>